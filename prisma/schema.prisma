generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts      SocialAccount[]
  videos        Video[]
  schedules     Schedule[]
}

model SocialAccount {
  id             String   @id @default(cuid())
  userId         String
  platform       String   // tiktok, facebook, instagram, youtube
  accountName    String
  chromeProfile  String   // Path to Chrome profile
  isActive       Boolean  @default(true)
  credentials    String?  // Encrypted credentials JSON
  lastPostAt     DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts          Post[]

  @@unique([userId, platform, accountName])
}

model Video {
  id          String   @id @default(cuid())
  userId      String
  fileName    String
  filePath    String
  fileSize    Int
  duration    Float?
  thumbnail   String?
  status      String   @default("uploaded") // uploaded, processing, ready, failed
  aiGenerated Boolean  @default(false)
  prompt      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts       Post[]
}

model Post {
  id              String   @id @default(cuid())
  videoId         String
  accountId       String
  caption         String?
  scheduledFor    DateTime?
  postedAt        DateTime?
  status          String   @default("pending") // pending, posted, failed
  error           String?
  platformPostId  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  video           Video         @relation(fields: [videoId], references: [id], onDelete: Cascade)
  account         SocialAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Schedule {
  id          String   @id @default(cuid())
  userId      String
  name        String
  frequency   String   // daily, weekly, custom
  time        String   // HH:mm format
  days        String?  // JSON array of days for weekly
  isActive    Boolean  @default(true)
  aiPrompt    String?  // Prompt for AI video generation
  platforms   String   // JSON array of platform IDs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
